{"version":3,"sources":["components/Navigation.jsx","components/Footer.jsx","views/MovieDetail.jsx","components/MovieCard.jsx","views/MovieList.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","es","to","Footer","MovieDetail","console","log","this","props","Component","MovieCard","data","id","style","backgroundImage","concat","backdrop_path","title","overview","MovieList","extractType","type","_this","state","movies","_type","_this2","axios","get","then","res","setState","results","newType","getMovies","map","movie","src_components_MovieCard","key","App","src_components_Navigation","views_MovieDetail","path","src_views_MovieList","default","from","noThrow","src_components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2447a1e1.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from '@reach/router';\n\nimport './Navigation.scss'\n\n// componente tipo función \nconst Navigation = () => (\n  <nav className=\"navigation\">\n    {/* link interno para que el router sepa que estamos en SPA y no haga get */}\n    <Link to='/movies/top_rated'>Top rated</Link>\n    <Link to='/movies/upcoming'>Upcoming</Link>\n    <Link to='/movies/trending'>Trending</Link>\n    <Link to='/movies/popular'>Popular</Link>\n  </nav>\n)\n\nexport default Navigation;","import React from 'react';\n\nimport { Link } from '@reach/router';\n\nimport './Footer.scss'\n\n// componente tipo función \nconst Footer = () => (\n  <footer className='footer'>\n    <Link to='/movies/top_rated'>Top rated</Link>\n    <Link to='/movies/upcoming'>Upcoming</Link>\n    <Link to='/movies/trending'>Trending</Link>\n    <Link to='/movies/popular'>Popular</Link>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\n\n\nclass MovieDetail extends Component {\n  render() {\n    console.log(this.props);\n    return (\n      <section>\n        hola MovieDetail\n      </section>\n          );\n  }\n}\n\nexport default MovieDetail;\n","import React from 'react';\nimport { Link } from '@reach/router';\n\nimport './MovieCard.scss'\n\n// componente tipo función \nconst MovieCard = (props) => (\n  <Link className='movieCard' \n        to={'/movie/' + props.data.id} \n      style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w300/${props.data.backdrop_path})` }}>\n      <h1>{props.data.title} </h1>\n      <p>{props.data.overview}</p>\n      {console.log(props)}\n  </Link>\n);\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n// yarn add axios\nimport axios from 'axios';\nimport './MovieList.scss';\n\nimport MovieCard from '../components/MovieCard';\n\nclass MovieList extends Component {\n  extractType = () => {\n    const type = this.props.type\n\n    if (type === 'top_rated' || type === 'upcoming' || type === 'popular') {\n      return type;\n    } else {\n      return 'popular';\n    }\n  };\n\n  // seteamos estado  inicial vacío y que será un array\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     movies: [],\n  //   };\n  // }\n  state = {\n    movies: [],\n  };\n\n  getMovies(type) {\n    let url = (_type) => `https://api.themoviedb.org/3/movie/${_type}?api_key=323112ea2281b9eb70f319f4df422c6b`;\n\n    return axios.get(url(type)).then(res => this.setState({ movies: res.data.results, type:type }));\n  }\n\n  render() {\n    console.log(this.props);\n\n    //const newType = this.extractType(this.props.uri)\n    const newType = this.extractType()\n\n    if (newType !== this.state.type) {\n      this.getMovies(newType);\n      return <h1>loading movies</h1>\n    } else {\n      return (\n        <section className=\"MovieList\">\n          <h1> {this.state.type} movies</h1>\n\n          <div className='movies'>\n            {this.state.movies.map(movie => (\n              <MovieCard key={movie.id} data={movie} />\n            ))}\n          </div>\n        </section>\n      );\n    }\n\n\n  }\n}\n\n// const MovieList = props => <section>MovieList {JSON.stringify(props)}</section>;\n\nexport default MovieList;","import React, { Component } from 'react';\n\n// empleamos router nuevo https://reach.tech/router/example/basic \n// yarn add @reach/router\nimport { Router, Redirect } from \"@reach/router\";\nimport Navigation from \"./components/Navigation\";\nimport Footer from \"./components/Footer\";\n\nimport MovieDetail from \"./views/MovieDetail\";\nimport MovieList from \"./views/MovieList\";\n\n// yarn add node-sass\nimport './App.scss';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n         <Navigation />\n         <Router className='main'>\n          <MovieDetail path=\"/movie/:id\"/>\n          {/* le pasaremos el type a Navigation */}\n          {/* <MovieList path=\"/movies/:type\" default/> */}        \n          <MovieList path=\"/movies/:type\"/>\n          {/* pagina por defecto */}\n          {/* <Redirect from=\"/\" to=\"/movies/popular\" /> */}\n          <Redirect default from='*' to='movies/popular' noThrow />\n          {/* <NotFound path='notFound' /> */}\n         </Router>\n         <Footer />       \n       </div>\n          );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}